import{PD}from"./p-d.js";import{define}from"trans-render/define.js";import{createNestedProp}from"xtal-element/createNestedProp.js";export class PDX extends PD{static get is(){return"p-d-x"}commit(t,e){if(void 0===e)return;if("."===this.val&&"."===this.prop)return void Object.assign(t,e);const s=this.prop;switch(typeof s){case"symbol":t[s]=e;break;default:if(s.startsWith(".")){const r=s.substr(1),i=e?"add":"remove";t.classList[i](r)}else if(s.indexOf(".")>-1){const r=s.split(".");createNestedProp(t,r,e,!0)}else t[s]=e}}attchEvListnrs(){if("["!==this._on[0])return void super.attchEvListnrs();const t=this.getPreviousSib();if(!t)return;const e=this._on.split(",").map(t=>t.substr(1,t.length-2)),s={attributes:!0,attributeFilter:e};this._attributeObserver=new MutationObserver(s=>{const r={};e.forEach(e=>{r[e]=t.getAttribute(e)});const i={mutationRecords:s,values:r,target:t};this._hndEv(i)}),this._attributeObserver.observe(t,s)}disconnect(){this._attributeObserver&&this._attributeObserver.disconnect()}disconnectedCallback(){this.disconnect(),super.disconnectedCallback()}}define(PDX);