import{XtallatX}from"xtal-element/xtal-latx.js";import{up,hydrate}from"trans-render/hydrate.js";import{define}from"trans-render/define.js";import{destruct}from"xtal-element/destruct.js";export class PDQ{static define(t,e,s=null){class r extends(XtallatX(hydrate(HTMLElement))){constructor(){super(),this._connected=!1,this.style.display="none"}static get is(){return t}connectedCallback(){this[up](["input","disabled"]),this._connected=!0}get input(){return this._input}set input(t){this._input=t,this.value=e(t),this.onPropsChange()}attributeChangedCallback(t,e,s){switch(super.attributeChangedCallback(t,e,s),t){case"input":this.input=JSON.parse(s);break;default:this.onPropsChange()}}onPropsChange(){if(this._disabled)return;const t=this.value;this.de("value",{value:t});let e=null;switch(typeof t){case"string":case"boolean":case"number":e=t.toString().substr(0,10);break;case"object":if(!t)return;e=Array.isArray(t)?t.length:Object.keys(t).toString()}null!==e&&this.setAttribute("value-ish",e)}}const n=r.prototype,i=e.toString().trim();if(i.startsWith("({")){const t=i.indexOf("})",2);i.substring(2,t).split(",").map(t=>t.trim()).forEach(t=>{destruct(n,t,"input")})}(null===s||s(r))&&define(r)}static $(t){return t.replace(/(<([^>]+)>)/gi,"")}}customElements.PDQ=PDQ;